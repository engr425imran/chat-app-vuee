<template>
  <div class="window-container" :class="{ 'window-mobile': isDevice }">
    <form v-if="addNewRoom" @submit.prevent="createRoom">
      <input v-model="addRoomUsername" type="text" placeholder="Add username" />
      <button type="submit" :disabled="disableForm || !addRoomUsername">
        Create Room
      </button>
      <button class="button-cancel" @click="addNewRoom = false">Cancel</button>
    </form>

    <form v-if="inviteRoomId" @submit.prevent="addRoomUser">
      <input v-model="invitedUsername" type="text" placeholder="Add username" />
      <button type="submit" :disabled="disableForm || !invitedUsername">
        Add User
      </button>
      <button class="button-cancel" @click="inviteRoomId = null">Cancel</button>
    </form>

    <form v-if="removeRoomId" @submit.prevent="deleteRoomUser">
      <select v-model="removeUserId">
        <option default value="">Select User</option>
        <option v-for="user in removeUsers" :key="user._id" :value="user._id">
          {{ user }}
        </option>
      </select>
      <button type="submit" :disabled="disableForm || !removeUserId">
        Remove User
      </button>
      <button class="button-cancel" @click="removeRoomId = null">Cancel</button>
    </form>
    <Button @click="checkDelete()" class="check">display message</Button>
    <Button @click="displayUsers()" class="check">users</Button>
    <Button @click="getConverstionforUser()" class="check">converstion</Button>
    <chat-window
      :rooms="rooms"
      :room-id="roomId"
      :height="screenHeight"
      :styles="styles"
      :rooms-loaded="roomsLoaded"
      :current-user-id="currentUser.uid"
      :messages="messages"
      :messages-loaded="messagesLoaded"
      :message-selection-actions="messageSelectionActions"
      @fetch-more-rooms="fetchMoreRooms"
      @add-room="addRoom"
      @send-message="sendMessage"
      @toggle-rooms-list="$emit('show-demo-options', $event.opened)"
      @delete-message="deleteMessage"
      @listen-messages="listenMessages"
      @fetch-messages="fetchMessages"
    >
    </chat-window>
    <!-- 
      :loading-rooms="loadingRooms"
     -->
    <!-- functions to be uses -->
    <!-- @fetch-messages="fetchMessages" -->

    <!-- <div>
      :room-actions="roomActions"

      @edit-message="editMessage"
      @open-user-tag="openUserTag"
      @room-action-handler="menuActionHandler"
      @menu-action-handler="menuActionHandler"
      @message-selection-action-handler="messageSelectionActionHandler"
      @typing-message="typingMessage"
    </div> -->
  </div>
</template>

<script>
import ChatWindow from "vue-advanced-chat";
import { imran, uniqueId } from "./Helper/helperFunction";
// import { rooms } from "./Helper/dataObject";
import "vue-advanced-chat/dist/vue-advanced-chat.css";
import { CometChat } from "@cometchat-pro/chat";
// import { messages } from "./Helper/dataObject";

export default {
  name: "Chat-Container",
  components: {
    ChatWindow,
  },
  props: {
    theme: { type: String, default: "light" },
    isDevice: { type: Boolean, required: true },
    currentUser: { type: Object, required: true },
  },
  data() {
    return {
      roomId: null,
      messages: [],
      rooms: [],
      styles: { container: { borderRadius: "4px" } },
      // messages: messages,
      // rooms: rooms,
      previousLastLoadedMessage: null,
      messagesLoadedForSpecific: null,
      roomsLoaded: true,
      messagesLoaded: false,
      loadingRooms: true,
      addNewRoom: null,
      lastLoadedMessage: true,
      loadedRooms: true,
      inviteRoomId: null,
      removeRoomId: null,
      addRoomUsername: "",
      menuActions: [
        { name: "inviteUser", title: "Invite User" },
        { name: "removeUser", title: "Remove User" },
        { name: "deleteRoom", title: "Delete Rooms" },
      ],
      messageSelectionActions: [{ name: "deleteMessages", title: "Delete" }],
      roomMessage: "",
    };
  },
  computed: {
    screenHeight() {
      return this.isDevice ? window.innerHeight + "px" : "calc(100vh - 80px)";
    },
  },

  methods: {
    openFile() {
      console.log("helo");
    },
    addRoom() {
      this.resetForms();
      this.addNewRoom = true;
    },
    async createRoom(form) {
      this.disableForm = true;
      // const { id } = await firestoreService.addUser({
      //   username: this.addRoomUsername,
      // });
      // await firestoreService.updateUser(id, { _id: id });
      // await firestoreService.addRoom({
      //   users: [id, this.currentUserId],
      //   lastUpdated: new Date(),
      // });
      const newRoom = {
        roomId: this.uniqueId(),
        roomName: form.target[0]._value,
        avatar: require("@/assets/images/users.svg"),
        users: [],
      };
      // console.log(form.target[0]._value);
      this.addNewRoom = false;
      this.addRoomUsername = "";
      this.rooms.push(newRoom);
      // this.fetchRooms();
    },
    resetForms() {
      this.disableForm = false;
      this.addNewRoom = null;
      this.addRoomUsername = "";
      this.inviteRoomId = null;
      this.invitedUsername = "";
      this.removeRoomId = null;
      this.removeUserId = "";
    },
    deleteMessage({ message, roomId }) {
      // const newArr = this.messages.filter(function (stateMessage) {
      //   return stateMessage._id !== message._id;
      // });
      this.messages.forEach((element) => {
        if (element._id == message._id) {
          element.content = "this message has been deleted";
        }
      });
      // this.messages.filter();
      console.log(roomId);
    },

    // fetchMessages({ room, options = {} }) {
    fetchMessages({ room }) {
      this.getOldMessagesBetweenUser(room.roomId);
      console.log(room.roomId);

      // if (this.previousLastLoadedMessage) {
      //   this.messagesLoaded = true;
      //   console.log("waiiii");
      //   return;
      // }

      // this.selectedRoom = room.roomId;
      // this.roomId = room.roomId;
      // // this.messagesLoaded = true;
      // console.log("imran khan", room, options);
      // // console.log("options", options);
    },
    onMessage() {
      const message = {
        _id: this.uniqueId(),
        indexId: this.uniqueId(),
        senderId: 12394,
        content: "alaka pira wrak ye",
        timestamp: new Date(),
        username: "Ahmad",
        avatar: require("@/assets/images/avatars/avatarYoda.jpeg"),
      };
      this.messages.push(message);
    },
    async sendMessage({ content, roomId }) {
      let receiverID = roomId;
      let messageText = content;
      let receiverType = CometChat.RECEIVER_TYPE.USER;
      let textMessage = new CometChat.TextMessage(
        receiverID,
        messageText,
        receiverType
      );
      CometChat.sendMessage(textMessage).then(
        (message) => {
          console.log("Message sent successfully:", message);
          const messagePushToState = {
            _id: message.id,
            indexId: message.id,
            senderId: this.currentUser.uid,
            content: content,
            username: this.currentUser.username,
            avatar: this.currentUser.avatar,
            timestamp: this.formatTime(message.sentAt),
            date: this.formatDate(message.sentAt),
            distributed: true,
            saved: true,
          };
          this.messages.push(messagePushToState);
        },
        (error) => {
          console.log("Message sending failed with error:", error);
        }
      );
    },
    resetMessages() {
      this.messages = [];
      this.messagesLoaded = false;
      this.lastLoadedMessage = null;
      this.previousLastLoadedMessage = null;
      this.listeners.forEach((listener) => listener());
      this.listeners = [];
    },
    fetchRooms() {
      this.resetRooms();
      this.fetchMoreRooms();
    },
    resetRooms() {
      console.log("ddd");
    },
    fetchMoreRooms() {
      console.log("fetchMoreRooms");
    },
    displayUsers() {
      const users = new CometChat.UsersRequestBuilder().setLimit(5);
      const usersRequest = users.build();
      usersRequest.fetchNext().then((usersList) => {
        var newRooms = [];
        var roomObject;
        console.log(usersList);
        usersList.forEach((element) => {
          roomObject = {};
          roomObject["roomId"] = element.uid;
          roomObject["roomName"] = element.name;
          roomObject["avatar"] = element.avatar;
          roomObject["uid"] = element.uid;
          roomObject["users"] = [];
          newRooms.push(roomObject);
        });
        this.rooms = newRooms;
        this.roomId = this.rooms[0].roomId;
        this.messagesLoaded = true;
        this.roomsLoaded = true;
      });
    },
    listningforMessage() {
      let listenerID = "UNIQUE_LISTENER_ID";
      CometChat.addMessageListener(
        listenerID,
        new CometChat.MessageListener({
          onTextMessageReceived: (textMessage) => {
            console.log(textMessage);
            var message = {
              _id: textMessage.rawMessage.id,
              indexId: this.uniqueId(),
              senderId: textMessage.sender.uid,
              content: textMessage.data.text,
              timestamp: new Date(textMessage.sentAt * 1000),
              username: textMessage.sender.name,
              date: "20 Dec",
              saved: true,
              distributed: true,
            };
            this.messages.push(message);
            console.log("Text message received successfully");
            // addReciveMessages(textMessage);
          },
        })
      );
    },
    uniqueId,
    listenMessages(room) {
      console.log("listning to message", room);
    },
    async getOldMessagesBetweenUser(roomId) {
      let UID = roomId;
      let limit = 3;
      let messagesRequest = new CometChat.MessagesRequestBuilder()
        .setUID(UID)
        .setLimit(limit)
        .build();

      messagesRequest.fetchPrevious().then(
        (messages) => {
          this.addOldMessagesToSateToMessagesArray(messages);
        },
        (error) => {
          console.log("Message fetching failed with error:", error);
        }
      );
    },
    addOldMessagesToSateToMessagesArray(messages) {
      var oldConverstion = [];
      // console.log(messages);
      messages.forEach((element, index) => {
        var roomObject = {};
        roomObject["_id"] = element.id;
        roomObject["indexId"] = index + 1;
        roomObject["content"] = element.text;
        roomObject["senderId"] = element.sender.uid;
        roomObject["timestamp"] = this.formatTime(element.sentAt);
        roomObject["date"] = this.formatDate(element.sentAt);
        roomObject["distributed"] = true;
        roomObject["saved"] = true;
        roomObject["avatar"] = element.sender.avatar;
        oldConverstion.push(roomObject);
      });
      this.messages = oldConverstion;
      oldConverstion = [];
      this.messagesLoaded = true;
    },
    checking() {
      console.log("ss");
      // console.log(this.messagesLoaded);
      // this.messagesLoaded = !this.messagesLoaded;
      // console.log(this.messagesLoaded);
    },
    imran,
    getConverstionforUser() {
      let limit = 30;
      let conversationsRequest = new CometChat.ConversationsRequestBuilder()
        .setLimit(limit)
        .build();

      conversationsRequest.fetchNext().then(
        (conversationList) => {
          console.log("Conversations list received:", conversationList);
          this.displayConversation(conversationList);
        },
        (error) => {
          console.log("Conversations list fetching failed with error:", error);
        }
      );
    },
    displayConversation(conversationList) {
      var newRooms = [];
      var roomObject;
      console.log(conversationList);
      conversationList.forEach((element) => {
        if (element.conversationType === "group") {
          roomObject = {
            roomId: element.conversationWith.guid,
            roomName: element.conversationWith.name,
            avatar: element.conversationWith.icon,
            users: [],
            lastMessage: {
              content: element.lastMessage ? element.lastMessage.text : "",
              senderId: element.lastMessage ? element.lastMessage.sender : "",
              username: element.lastMessage ? element.lastMessage.name : "",
              timestamp: "Set me",
              date: "set me",
              saved: true,
              distributed: false,
              seen: false,
              new: true,
            },
          };
        } else {
          roomObject = {
            roomId: element.conversationWith.uid,
            roomName: element.conversationWith.name,
            avatar: element.conversationWith.avatar,
            uid: element.conversationWith.uid,
            users: [
              {
                _id: element.conversationWith.uid,
                username: element.conversationWith.name,
                avatar: element.conversationWith.avatar,
                status: {
                  state: "online",
                  lastChanged: "today, 14:30",
                },
              },
            ],
            lastMessage: {
              content: element.lastMessage
                ? element.lastMessage.text
                : "" + "sss",
              senderId: element.lastMessage.sender.uid,
              username: element.lastMessage.sender.name,
              timestamp: this.formatTime(element.lastMessage.sentAt),
              date: this.formatDate(element.lastMessage.sentAt),
              saved: false,
              distributed: false,
              seen: true,
              new: true,
            },
          };
        }

        newRooms.push(roomObject);
      });
      this.previousLastLoadedMessage = true;
      this.rooms = newRooms;
      console.log(newRooms);
      this.roomId = this.rooms[0].roomId;
      this.messagesLoaded = true;
      this.roomsLoaded = true;
    },
    checkObj(element) {
      const exportObject = {
        content: element.text.name,
        // content: "element.lastMessage.text",
        senderId: "superhero2",
        // senderId: element.lastMessage.sender.uid,
        username: "element.lastMessage.sender.name",
        // username: element.lastMessage.sender.name,
        timestamp: new Date(),
        // timestamp: new Date(element.lastMessage.sentAt * 1000),
        saved: true,
        distributed: false,
        seen: false,
        new: true,
      };
      console.log(element.lastMessage);
      return exportObject;
    },
    formatTime(utcTime) {
      const time = new Date(utcTime * 1000).toLocaleString("en-us", {
        hour: "numeric",
        minute: "numeric",
      });
      return time;
    },
    formatDate(utcTime) {
      const dd = new Date(utcTime * 1000).toLocaleString("en-us", {
        day: "numeric",
        month: "long",
      });
      const formatime = dd.split(" ").reverse().join(" ");
      console.log(formatime);
      return formatime;
    },
  },
  created() {
    this.listningforMessage();
  },
  beforeDestroy() {
    // let listenerID = "UNIQUE_LISTENER_ID";
    // CometChat.removeMessageListener(listenerID);
  },
};
</script>

<style lang="scss" scoped>
@import "./Helper/chatContainer.scss";
</style>
